{"version":3,"sources":["day8/re_frame/undo.cljs"],"mappings":"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","names":["day8.re-frame.undo/config","cljs.core.atom","cljs.core/deref","cljs.core/reset!","day8.re-frame.undo/undo-config!","new-config","temp__5751__auto__","unknown-keys","cljs.core/seq","clojure.set.difference","cljs.core/keys","cljs.core/set","re_frame.core.console","cljs.core.swap_BANG_","cljs.core/merge","day8.re-frame.undo/max-undos","day8.re-frame.undo/undo-list","reagent.core.atom","day8.re-frame.undo/redo-list","day8.re-frame.undo/app-explain","day8.re-frame.undo/undo-explain-list","day8.re-frame.undo/redo-explain-list","day8.re-frame.undo/clear-undos!","day8.re-frame.undo/clear-redos!","day8.re-frame.undo/clear-history!","day8.re-frame.undo/store-now!","explanation","cljs.core/vec","cljs.core/take-last","cljs.core.conj","fexpr__27343","re-frame.db/app-db","day8.re-frame.undo/undos?","day8.re-frame.undo/redos?","day8.re-frame.undo/undo-explanations","re-frame.core/reg-sub-raw","_","reagent.ratom/make-reaction","day8.re-frame.undo/undo","harvester","reinstater","undos","cur","redos","u","r","cljs.core/cons","G__27344","G__27345","cljs.core/last","cljs.core/pop","day8.re-frame.undo/undo-n","n","p__27346","vec__27347","cljs.core.nth","day8.re-frame.undo/undo-handler","cljs.core/not","or__4253__auto__","day8.re-frame.undo/redo","G__27350","G__27351","cljs.core/first","cljs.core/rest","day8.re-frame.undo/redo-n","p__27352","vec__27353","day8.re-frame.undo/redo-handler","day8.re-frame.undo/purge-redo-handler","db","var_args","G__27357","day8.re-frame.undo/undoable","js/Error","day8.re_frame.undo.undoable","re_frame.core.__GT_interceptor","context","event","re_frame.core.get_coeffect","undo-effect","re_frame.core.get_effect","cljs.core/fn?","G__27358","G__27359","cljs.core.update","cljs.core/dissoc","day8.re-frame.undo/register-events-subs!","re_frame.core.reg_event_fx","re_frame.core.reg_event_db"],"sourcesContent":["(ns day8.re-frame.undo\n  (:require-macros [reagent.ratom  :refer [reaction]])\n  (:require\n    [reagent.core        :as     reagent]\n    [re-frame.core       :as     re-frame]\n    [re-frame.db         :refer  [app-db]]))\n\n\n;; -- Configuration ----------------------------------------------------------\n\n(def config (atom {:max-undos    50   ;; Maximum number of undo states maintained\n                   :harvest-fn   deref\n                   :reinstate-fn reset!}))\n\n(defn undo-config!\n  \"Set configuration parameters for library.\n\n  Should be called on app startup.\"\n  [new-config]\n  (if-let [unknown-keys (seq (clojure.set/difference\n                               (-> new-config keys set)\n                               (-> @config keys set)))]\n    (re-frame/console :error \"re-frame-undo: undo-config! called within unknown keys: \" unknown-keys)\n    (swap! config merge new-config)))\n\n\n(defn max-undos\n  []\n  (:max-undos @config))\n\n\n\n;; -- State history ----------------------------------------------------------\n\n(def undo-list \"A list of history states\" (reagent/atom []))\n(def redo-list \"A list of future states, caused by undoing\" (reagent/atom []))\n\n;; -- Explanations -----------------------------------------------------------\n;;\n;; Each undo has an associated string explanation, for display to the user.\n;;\n;; It seems ugly to have mirrored vectors, but ...\n;; the code kinda falls out when you do. I'm feeling lazy.\n(def app-explain \"Mirrors app-db\" (reagent/atom \"\"))\n(def undo-explain-list \"Mirrors undo-list\" (reagent/atom []))\n(def redo-explain-list \"Mirrors redo-list\" (reagent/atom []))\n\n(defn clear-undos!\n  []\n  (reset! undo-list [])\n  (reset! undo-explain-list []))\n\n\n(defn clear-redos!\n  []\n  (reset! redo-list [])\n  (reset! redo-explain-list []))\n\n\n(defn clear-history!\n  []\n  (clear-undos!)\n  (clear-redos!)\n  (reset! app-explain \"\"))\n\n\n(defn store-now!\n  \"Stores the value currently in app-db, so the user can later undo\"\n  [explanation]\n  (clear-redos!)\n  (reset! undo-list (vec (take-last\n                           (max-undos)\n                           (conj @undo-list ((:harvest-fn @config) app-db)))))\n  (reset! undo-explain-list (vec (take-last\n                                   (max-undos)\n                                   (conj @undo-explain-list @app-explain))))\n  (reset! app-explain explanation))\n\n\n(defn undos?\n  \"Returns true if undos exist, false otherwise\"\n  []\n  (seq @undo-list))\n\n(defn redos?\n  \"Returns true if redos exist, false otherwise\"\n  []\n  (seq @redo-list))\n\n(defn undo-explanations\n  \"Returns a vector of undo descriptions, perhaps empty\"\n  []\n  (if (undos?)\n    (conj @undo-explain-list @app-explain)\n    []))\n\n;; -- subscriptions  -----------------------------------------------------------------------------\n\n(re-frame/reg-sub-raw\n  :undos?                   ;;  usage:  (subscribe [:undos?])\n  (fn handler\n    ; \"returns true if anything is stored in the undo list, otherwise false\"\n    [_ _]\n    (reaction (undos?))))\n\n(re-frame/reg-sub-raw\n  :redos?\n  (fn handler\n    ; \"returns true if anything is stored in the redo list, otherwise false\"\n    [_ _]\n    (reaction (redos?))))\n\n\n(re-frame/reg-sub-raw\n  :undo-explanations\n  (fn handler\n    ; \"returns a vector of string explanations ordered oldest to most recent\"\n    [_ _]\n    (reaction (undo-explanations))))\n\n(re-frame/reg-sub-raw\n  :redo-explanations\n  (fn handler\n    ; \"returns a vector of string explanations ordered from most recent undo onward\"\n    [_ _]\n    (reaction (deref redo-explain-list))))\n\n;; -- event handlers  ----------------------------------------------------------------------------\n\n\n(defn undo\n  [harvester reinstater undos cur redos]\n  (let [u @undos\n        r (cons (harvester cur) @redos)]\n    (reinstater cur (last u))\n    (reset! redos r)\n    (reset! undos (pop u))))\n\n\n(defn undo-n\n  \"undo n steps or until we run out of undos\"\n  [n]\n  (when (and (pos? n) (undos?))\n    (undo (:harvest-fn @config) (:reinstate-fn @config) undo-list app-db redo-list)\n    (undo deref reset! undo-explain-list app-explain redo-explain-list)\n    (recur (dec n))))\n\n(defn undo-handler\n  [_ [_ n]]\n  (if-not (undos?)\n    (re-frame/console :warn \"re-frame: you did a (dispatch [:undo]), but there is nothing to undo.\")\n    (undo-n (or n 1)))\n  {}) ; work is done directly on app-db\n\n(defn redo\n  [harvester reinstater undos cur redos]\n  (let [u (conj @undos (harvester cur))\n        r  @redos]\n    (reinstater cur (first r))\n    (reset! redos (rest r))\n    (reset! undos u)))\n\n(defn redo-n\n  \"redo n steps or until we run out of redos\"\n  [n]\n  (when (and (pos? n) (redos?))\n    (redo (:harvest-fn @config) (:reinstate-fn @config) undo-list app-db redo-list)\n    (redo deref reset! undo-explain-list app-explain redo-explain-list)\n    (recur (dec n))))\n\n(defn redo-handler\n  [_ [_ n]]  ;; if n absent, defaults to 1\n    (if-not (redos?)\n      (re-frame/console :warn \"re-frame: you did a (dispatch [:redo]), but there is nothing to redo.\")\n      (redo-n (or n 1)))\n    {})      ; work is done directly on app-db\n\n(defn purge-redo-handler\n  [db _]\n  (if-not (redos?)\n    (re-frame/console :warn \"re-frame: you did a (dispatch [:purge-redos]), but there is nothing to redo.\")\n    (clear-redos!))\n  db)\n\n\n;; -- Interceptors ----------------------------------------------------------\n\n(defn undoable\n  \"returns a side-effecting Interceptor, which stores an undo checkpoint in\n  `:after` processing.\n   If the `:effect` cotnains an `:undo` key, then use the explanation provided\n   by it. Otherwise, `explanation` can be:\n     - a string (of explanation)\n     - a function expected to return a string of explanation. It will be called\n       with two arguments: `db` and `event-vec`.\n     - a nil, in which case \\\"\\\" is recorded as the explanation\n  \"\n  ([] (undoable nil))\n  ([explanation]\n      (re-frame/->interceptor\n        :id     :undoable\n        :after  (fn [context]\n                  (let [event        (re-frame/get-coeffect context :event)\n                        undo-effect  (re-frame/get-effect context :undo)\n                        explanation (cond\n                                      (some? undo-effect)   undo-effect\n                                      (fn? explanation)     (explanation\n                                                              (re-frame/get-coeffect context :db)\n                                                              event)\n                                      (string? explanation) explanation\n                                      (nil? explanation)    \"\"\n                                      :else (re-frame/console :error \"re-frame-undo: \\\"undoable\\\" interceptor on event \" event \" given a bad parameter. Got: \" explanation))]\n                    (store-now! explanation)\n                    (update context :effects dissoc :undo))))))   ;; remove any `:undo` effect. Already handled.\n\n\n;; -- register handlers for events and subscriptions\n\n\n(defn register-events-subs!\n  []\n  (re-frame/reg-event-fx\n    :undo                     ;; usage:  (dispatch [:undo n])  n is optional, defaults to 1\n    undo-handler)\n  (re-frame/reg-event-fx\n    :redo                     ;; usage:  (dispatch [:redo n])\n    redo-handler)\n  (re-frame/reg-event-db\n    :purge-redos              ;; usage:  (dispatch [:purge-redos])\n    purge-redo-handler))\n\n(register-events-subs!)\n"]}